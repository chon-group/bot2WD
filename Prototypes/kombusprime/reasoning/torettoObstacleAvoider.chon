{"id":17,"name":"toretoObsAvoid","agents":[{"archClass":"Argo","name":"toretto","sourceCode":"/* Initial beliefs and rules */\nserialPort(ttyACM0).\n\n/* Initial goals */\n!start.\n\n/* Plans */\n+!start: serialPort(SP) <- \n\t.print(\"Nao importa se foram 10 cm, ou 10 km. Vencer eh vencer!\");\n\t.port(SP);\n\t.limit(600);\n\t.percepts(open);\n\t.act(lightOn);\n\t.act(breakLOn);\n.\n\n+distance(D): D >= 50 <- .act(buzzerOff); .act(goAhead).\n\n+distance(D): D < 50 & D \\== -1 <- .act(stop); .act(buzzerOn); .random(R); !turn(R) .\n\n+!turn(R): not motorStatus(turningRight) & R >= 0.5 <- .act(goLeft).\n\n+!turn(R): not motorStatus(turningLeft) & R <  0.5 <- .act(goRight).\n\n+!turn(R): motorStatus(turningRight) <- .act(goRight).\n\n+!turn(R): motorStatus(turningLeft) <- .act(goLeft).  \n\n+lightStatus(S) <- .print(\"Light: \",S).\n\n+motorStatus(S) <- .print(\"Motor: \",S).\n"}],"firmwares":[{"name":"kom","sourceCode":"#include <Javino.h>     //Available at: https://github.com/chon-group/javino2arduino\n#include <HCSR04.h>     //Available at: https://github.com/Martinsos/arduino-lib-hc-sr04\n\n#define PinLight  2     // Farol\n#define PinBreakL 3     // Freio\n#define PinEcho   4     // Sensor de Ultrasom Echo 4 e Trig 5\n#define PinTrig   5              \n#define PinBuzzer 6     // Buzzer\n#define PinBridH1 7     // Ponte H M1=7, M2=8, M3=9, M4=10\n#define PinBridH2 8\n#define PinBridH3 9\n#define PinBridH4 10\n#define PinLed    13    // Alerta ou Giroflex\n#define PinLDR    A0    // Sensor de Luz\n\n\nJavino javino;\nUltraSonicDistanceSensor hc(PinTrig, PinEcho);\nString strLedStatus, strLightStatus, strBreakLStatus, strBuzzerStatus, strMotorStatus;\nunsigned long lastPercept = -1;\n\nvoid serialEvent(){\n   javino.readSerial();\n}\n\n\nvoid loop(){\nif(javino.availableMsg()){\n  String strMsg = javino.getMsg();\n  if(strMsg==\"getPercepts\"){javino.sendMsg(getStatus());}\n    else if(strMsg==\"buzzerOn\") {buzzer(\"on\");}\n    else if(strMsg==\"buzzerOff\")  {buzzer(\"off\");}\n    else if(strMsg==\"ledOn\")  {led(\"on\");}\n    else if(strMsg==\"ledOff\") {led(\"off\");}\n    else if(strMsg==\"lightOn\")  {light(\"on\");}\n    else if(strMsg==\"lightOff\") {light(\"off\");}\n    else if(strMsg==\"breakLOn\") {breakL(\"on\");}\n    else if(strMsg==\"breakLOff\")  {breakL(\"off\");}\n    else if(strMsg==\"stop\") {stopRightNow();}\n    else if(strMsg==\"goLeft\") {turnLeft();}\n    else if(strMsg==\"goRight\")  {turnRight();}\n    else if(strMsg==\"goAhead\")  {goAhead();}\n\n    lastPercept = millis();\n  }\n\n  if((lastPercept != -1) && (millis() > lastPercept+5000)){\n    powerOff();\n  }\n}\n\nvoid buzzer(String strOpt){\nif(strOpt==\"on\"){digitalWrite(PinBuzzer, HIGH);}\n  else{digitalWrite(PinBuzzer, LOW);}\nsetBuzzerStatus(strOpt);\n}\n\nvoid led(String strledOpt){\nif(strledOpt==\"on\"){digitalWrite(PinLed, HIGH);}\n  else{digitalWrite(PinLed, LOW);}\nsetLedStatus(strledOpt);\n}\n\nvoid light(String strledOpt){\nif(strledOpt==\"on\"){digitalWrite(PinLight, HIGH);}\n  else{digitalWrite(PinLight, LOW);}\nsetLightStatus(strledOpt);\n}\n\nvoid breakL(String strledOpt){\n  if(strledOpt==\"on\"){\n    digitalWrite(PinBreakL, HIGH);\n  }else{\n    digitalWrite(PinBreakL, LOW);\n  }\n  setBreakLStatus(strledOpt);\n}\n\nvoid goAhead(){\n    digitalWrite(PinBridH1, HIGH);\n    digitalWrite(PinBridH2, LOW);\n    digitalWrite(PinBridH3, HIGH);\n    digitalWrite(PinBridH4, LOW);\n    setMotorStatus(\"running\");\n}\n\n\nvoid stopRightNow(){\n  digitalWrite(PinBridH1, LOW);\n  digitalWrite(PinBridH2, LOW);\n  digitalWrite(PinBridH3, LOW);\n  digitalWrite(PinBridH4, LOW);\n  setMotorStatus(\"stopped\");\n}\n\nvoid turnLeft(){\n  digitalWrite(PinBridH1, HIGH);\n  digitalWrite(PinBridH2, LOW);\n  digitalWrite(PinBridH3, LOW);\n  digitalWrite(PinBridH4, HIGH);\n  setMotorStatus(\"turningLeft\");\n}\n\n\nvoid turnRight(){\n  digitalWrite(PinBridH1, LOW);\n  digitalWrite(PinBridH2, HIGH);\n  digitalWrite(PinBridH3, HIGH);\n  digitalWrite(PinBridH4, LOW);\n  setMotorStatus(\"turningRight\");\n}\n\n\nString getStatus(){\n  int d = hc.measureDistanceCm();\n  if(d==0){\n    d=1024;\n  }\n\n  \nString out =  \n\"ledStatus(\"+strLedStatus+\");\"+\n\"lightStatus(\"+strLightStatus+\");\"+\n\"breakLStatus(\"+strBreakLStatus+\");\"+\n\"buzzerStatus(\"+strBuzzerStatus+\");\"+\n\"luminosity(\"+String(analogRead(PinLDR))+\");\"+\n\"distance(\"+String(d)+\");\"+\n\"motorStatus(\"+strMotorStatus+\");\";\n   \nreturn out;\n}\n\nvoid setBuzzerStatus(String newValue){\n  strBuzzerStatus=newValue;\n}\n\nvoid setLedStatus(String newValue){\n  strLedStatus=newValue;\n}\n\nvoid setLightStatus(String newValue){\n  strLightStatus=newValue;\n}\n\nvoid setBreakLStatus(String newValue){\n  strBreakLStatus=newValue;\n}\n\nvoid setMotorStatus(String newValue){\n  strMotorStatus=newValue;\n}\n\n\n\nvoid setup(){\n  pinMode(PinLight,   OUTPUT);\n  pinMode(PinBreakL,  OUTPUT);\n  pinMode(PinBuzzer,  OUTPUT);\n  pinMode(PinLed,     OUTPUT);\n  pinMode(PinBridH1,  OUTPUT);\n  pinMode(PinBridH2,  OUTPUT);\n  pinMode(PinBridH3,  OUTPUT);\n  pinMode(PinBridH4,  OUTPUT);\n  pinMode(PinLDR,     INPUT);\n  pinMode(PinTrig,    OUTPUT);\n  pinMode(PinEcho,    INPUT);\n  Serial.begin(9600);\n\n  setLedStatus(\"off\");\n    setLightStatus(\"off\");\n    setBreakLStatus(\"off\");\n    setBuzzerStatus(\"off\");\n    setMotorStatus(\"stopped\");\n\n}\n\nvoid powerOff() {\n  for (int i = 2; i <= 13; i++) {\n    digitalWrite(i, LOW);\n  }\n  \n#ifdef ARDUINO_AVR_MEGA\n  for (int i = 22; i <= 53; i++) {\n    digitalWrite(i, LOW);\n  }\n#endif\n}"}]}